# Autogenerated with SMOP 
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import hamming, welch


# ./probeData.m


# @function
def probeData(*args, **kwargs):
    nargin = len(args)

    # Function plots raw data information: time domain plot, a frequency domain
    # plot and a histogram.

    # The function can be called in two ways:
    #   probeData(settings)
    # or
    #   probeData(fileName, settings)

    #   Inputs:
    #       fileName        - name of the data file. File name is read from
    #                       settings if parameter fileName is not provided.

    #       settings        - receiver settings. Type of data file, sampling
    #                       frequency and the default filename are specified
    #                       here.

    # --------------------------------------------------------------------------
    #                           SoftGNSS v3.0
    #
    # Copyright (C) Dennis M. Akos
    # Written by Darius Plausinaitis and Dennis M. Akos
    # --------------------------------------------------------------------------
    # This program is free software; you can redistribute it and/or
    # modify it under the terms of the GNU General Public License
    # as published by the Free Software Foundation; either version 2
    # of the License, or (at your option) any later version.

    # This program is distributed in the hope that it will be useful,
    # but WITHOUT ANY WARRANTY; without even the implied warranty of
    # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    # GNU General Public License for more details.

    # You should have received a copy of the GNU General Public License
    # along with this program; if not, write to the Free Software
    # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
    # USA.
    # --------------------------------------------------------------------------

    # CVS record:
    # $Id: probeData.m,v 1.1.2.7 2006/08/22 13:46:00 dpl Exp $

    ## Check the number of arguments ==========================================
    if nargin == 1:
        settings = args[0]
        # ./probeData.m:45
        fileNameStr = settings.fileName
    # ./probeData.m:46
    elif nargin == 2:
        fileNameStr, settings = args
        # ./probeData.m:48
        if type(fileNameStr) is not str:
            raise TypeError('File name must be a string')
    else:
        raise Exception('Incorrect number of arguments')

    ## Generate plot of raw data ==============================================
    # ./probeData.m:57
    try:
        with open(fileNameStr, 'rb') as fid:
            # Move the starting point of processing. Can be used to start the
            # signal processing at any point in the data record (e.g. for long
            # records).
            fid.seek(settings.skipNumberOfBytes, 0)
            samplesPerCode = long(round(settings.samplingFreq / (settings.codeFreqBasis / settings.codeLength)))
            # ./probeData.m:66
            try:
                data = np.fromfile(fid,
                                   settings.dataType,
                                   10 * samplesPerCode)
            # ./probeData.m:70
            except IOError:
                # The file is too short
                print 'Could not read enough data from the data file.'
            # --- Initialization ---------------------------------------------------
            plt.figure(100)
            plt.clf()
            timeScale = np.arange(0, 0.005, 1 / settings.samplingFreq)
            # ./probeData.m:83

            plt.subplot(2, 2, 1)
            plt.plot(1000 * timeScale[1:round(samplesPerCode / 50)],
                     data[1:round(samplesPerCode / 50)])
            plt.axis('tight')
            plt.grid()
            plt.title('Time domain plot')
            plt.xlabel('Time (ms)')
            plt.ylabel('Amplitude')
            plt.subplot(2, 2, 2)
            f, Pxx = welch(data - np.mean(data),
                           settings.samplingFreq / 1000000.0,
                           hamming(16384, False),
                           16384,
                           1024,
                           16384)
            plt.semilogy(f, Pxx)
            plt.axis('tight')
            plt.grid()
            plt.title('Frequency domain plot')
            plt.xlabel('Frequency (MHz)')
            plt.ylabel('Magnitude')
            plt.show()
            plt.subplot(2, 2, 3.5)
            plt.hist(data, np.arange(- 128, 128))
            dmax = np.max(np.abs(data)) + 1
            # ./probeData.m:108
            plt.axis('tight')
            adata = plt.axis()
            # ./probeData.m:110
            plt.axis([-dmax, dmax, adata[2], adata[3]])
            plt.grid('on')
            plt.title('Histogram')
            plt.xlabel('Bin')
            plt.ylabel('Number in bin')
        # === Error while opening the data file ================================
    except IOError as e:
        print 'Unable to read file "%s": %s' % (fileNameStr, e)
